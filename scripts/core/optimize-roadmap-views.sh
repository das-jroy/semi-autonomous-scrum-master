#!/bin/bash

# Roadmap View Optimization Script
# Optimizes existing roadmap views and creates complementary views

set -e

echo "üó∫Ô∏è Roadmap View Optimization"
echo "============================"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configuration
REPO_OWNER="dasdigitalplatform"
PROJECT_NUMBER="3"
PROJECT_URL="https://github.com/orgs/$REPO_OWNER/projects/$PROJECT_NUMBER"
EXISTING_ROADMAP_VIEW="https://github.com/orgs/dasdigitalplatform/projects/3/views/5"

# Function to analyze existing roadmap view
analyze_existing_view() {
    echo -e "${BOLD}${CYAN}üìä Existing Roadmap View Analysis${NC}"
    echo "================================="
    echo ""
    
    echo -e "${GREEN}Current Roadmap View:${NC}"
    echo "üìç URL: $EXISTING_ROADMAP_VIEW"
    echo "üìã View ID: 5"
    echo ""
    
    echo -e "${BLUE}Recommended Optimizations for View 5:${NC}"
    echo ""
    
    echo -e "${YELLOW}1. Sort Configuration:${NC}"
    echo "   ‚Ä¢ Primary: Priority (High ‚Üí Medium ‚Üí Low)"
    echo "   ‚Ä¢ Secondary: Module Category (Foundation ‚Üí Compute ‚Üí Data ‚Üí Security ‚Üí Advanced)"
    echo "   ‚Ä¢ Tertiary: Status (Todo ‚Üí In Progress ‚Üí Review ‚Üí Blocked ‚Üí Done)"
    echo ""
    
    echo -e "${YELLOW}2. Column Configuration:${NC}"
    echo "   ‚Ä¢ Title (300px) - Issue name"
    echo "   ‚Ä¢ Status (120px) - Current workflow status"
    echo "   ‚Ä¢ Priority (100px) - High/Medium/Low"
    echo "   ‚Ä¢ Module Category (150px) - Development phase"
    echo "   ‚Ä¢ Complexity (100px) - Development effort"
    echo "   ‚Ä¢ Assignees (120px) - Who's working on it"
    echo ""
    
    echo -e "${YELLOW}3. Filter Configuration:${NC}"
    echo "   ‚Ä¢ Show: Todo, In Progress, Review, Blocked (hide Done for active focus)"
    echo "   ‚Ä¢ Or use: All statuses for complete roadmap visibility"
    echo ""
}

# Function to suggest complementary views
suggest_complementary_views() {
    echo -e "${BOLD}${PURPLE}üéØ Complementary Roadmap Views${NC}"
    echo "============================="
    echo ""
    
    echo -e "${CYAN}Since you have View 5 (Roadmap), consider adding:${NC}"
    echo ""
    
    echo -e "${GREEN}üìÖ Phase Timeline View (Table)${NC}"
    echo "   ‚Ä¢ Purpose: Sequential phase-by-phase development tracking"
    echo "   ‚Ä¢ Group by: Module Category"
    echo "   ‚Ä¢ Sort: Module Category, then Priority"
    echo "   ‚Ä¢ Best for: Sprint planning and phase coordination"
    echo ""
    
    echo -e "${GREEN}üèóÔ∏è Phase Board View (Board)${NC}"
    echo "   ‚Ä¢ Purpose: Visual kanban board grouped by development phases"
    echo "   ‚Ä¢ Group by: Module Category"
    echo "   ‚Ä¢ Columns: Foundation | Compute | Data | Security | Advanced"
    echo "   ‚Ä¢ Best for: Resource allocation and phase management"
    echo ""
    
    echo -e "${GREEN}‚ö° Active Sprint View (Board)${NC}"
    echo "   ‚Ä¢ Purpose: Current sprint focus (complement your existing roadmap)"
    echo "   ‚Ä¢ Group by: Status"
    echo "   ‚Ä¢ Filter: Only Todo, In Progress, Review, Blocked"
    echo "   ‚Ä¢ Best for: Daily standups and sprint execution"
    echo ""
    
    echo -e "${GREEN}üìä Progress Dashboard (Table)${NC}"
    echo "   ‚Ä¢ Purpose: Comprehensive progress tracking and reporting"
    echo "   ‚Ä¢ Show: All columns with metadata"
    echo "   ‚Ä¢ Sort: Priority, then Module Category"
    echo "   ‚Ä¢ Best for: Stakeholder reporting and detailed tracking"
    echo ""
}

# Function to create browser automation for complementary views
create_complementary_views_automation() {
    echo -e "${BLUE}üåê Creating Browser Automation for Complementary Views${NC}"
    echo "====================================================="
    
    cat > "browser-console-complementary-views.js" << 'EOF'
// Browser Console Commands for Complementary Roadmap Views
// Since you already have View 5 (Roadmap), these complement it
// Open: https://github.com/orgs/dasdigitalplatform/projects/3
// Press F12 ‚Üí Console tab ‚Üí Run these commands

console.log('üéØ Creating Complementary Roadmap Views...');

// Create Phase Timeline View (Table grouped by Module Category)
fetch('/orgs/dasdigitalplatform/memexes/16149890/views', {
  method: 'POST',
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest'
  },
  body: JSON.stringify({
    view: {
      layout: 'table_layout',
      name: 'Phase Timeline',
      description: 'Sequential phase-by-phase development tracking'
    }
  })
}).then(response => response.json())
  .then(data => console.log('‚úÖ Created Phase Timeline:', data))
  .catch(error => console.error('‚ùå Error:', error));

// Create Phase Board View (Board grouped by Module Category)
fetch('/orgs/dasdigitalplatform/memexes/16149890/views', {
  method: 'POST',
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest'
  },
  body: JSON.stringify({
    view: {
      layout: 'board_layout',
      name: 'Phase Board',
      description: 'Visual kanban board grouped by development phases'
    }
  })
}).then(response => response.json())
  .then(data => console.log('‚úÖ Created Phase Board:', data))
  .catch(error => console.error('‚ùå Error:', error));

// Create Active Sprint View (Board grouped by Status, filtered for active work)
fetch('/orgs/dasdigitalplatform/memexes/16149890/views', {
  method: 'POST',
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest'
  },
  body: JSON.stringify({
    view: {
      layout: 'board_layout',
      name: 'Active Sprint',
      description: 'Current sprint focus with active work only'
    }
  })
}).then(response => response.json())
  .then(data => console.log('‚úÖ Created Active Sprint:', data))
  .catch(error => console.error('‚ùå Error:', error));

// Create Progress Dashboard View (Table with all metadata)
fetch('/orgs/dasdigitalplatform/memexes/16149890/views', {
  method: 'POST',
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest'
  },
  body: JSON.stringify({
    view: {
      layout: 'table_layout',
      name: 'Progress Dashboard',
      description: 'Comprehensive progress tracking and reporting'
    }
  })
}).then(response => response.json())
  .then(data => console.log('‚úÖ Created Progress Dashboard:', data))
  .catch(error => console.error('‚ùå Error:', error));

console.log('üéØ Complementary view creation commands sent!');
console.log('');
console.log('After creation, configure each view:');
console.log('‚Ä¢ Phase Timeline: Group by Module Category, sort by Phase ‚Üí Priority');
console.log('‚Ä¢ Phase Board: Group by Module Category for visual phase management');
console.log('‚Ä¢ Active Sprint: Group by Status, filter out Done items');
console.log('‚Ä¢ Progress Dashboard: Show all columns, sort by Priority ‚Üí Module Category');
EOF

    echo -e "${GREEN}‚úÖ Generated: browser-console-complementary-views.js${NC}"
    echo ""
}

# Function to provide manual setup instructions
provide_manual_setup() {
    echo -e "${BOLD}${YELLOW}üìã Manual Setup Instructions${NC}"
    echo "============================="
    echo ""
    
    echo -e "${CYAN}For your existing Roadmap View (View 5):${NC}"
    echo "1. Go to: $EXISTING_ROADMAP_VIEW"
    echo "2. Click the view settings (‚öôÔ∏è) or view options"
    echo "3. Configure sorting: Priority ‚Üí Module Category ‚Üí Status"
    echo "4. Configure columns: Title, Status, Priority, Module Category, Complexity, Assignees"
    echo "5. Optional: Filter to show only active work (exclude Done)"
    echo ""
    
    echo -e "${CYAN}To create complementary views:${NC}"
    echo "1. Go to: $PROJECT_URL"
    echo "2. Click 'New view' for each additional view"
    echo "3. Follow the configurations below:"
    echo ""
    
    echo -e "${BOLD}Phase Timeline:${NC}"
    echo "‚Ä¢ Layout: Table"
    echo "‚Ä¢ Name: 'Phase Timeline'"
    echo "‚Ä¢ Group by: Module Category"
    echo "‚Ä¢ Sort: Module Category (asc), Priority (desc)"
    echo "‚Ä¢ Purpose: Sequential phase development"
    echo ""
    
    echo -e "${BOLD}Phase Board:${NC}"
    echo "‚Ä¢ Layout: Board"
    echo "‚Ä¢ Name: 'Phase Board'"
    echo "‚Ä¢ Group by: Module Category"
    echo "‚Ä¢ Shows columns: Foundation | Compute | Data | Security | Advanced"
    echo "‚Ä¢ Purpose: Visual phase management"
    echo ""
    
    echo -e "${BOLD}Active Sprint:${NC}"
    echo "‚Ä¢ Layout: Board"
    echo "‚Ä¢ Name: 'Active Sprint'"
    echo "‚Ä¢ Group by: Status"
    echo "‚Ä¢ Filter: Exclude 'Done' status"
    echo "‚Ä¢ Purpose: Current sprint focus"
    echo ""
    
    echo -e "${BOLD}Progress Dashboard:${NC}"
    echo "‚Ä¢ Layout: Table"
    echo "‚Ä¢ Name: 'Progress Dashboard'"
    echo "‚Ä¢ Columns: All fields visible"
    echo "‚Ä¢ Sort: Priority (desc), Module Category (asc)"
    echo "‚Ä¢ Purpose: Comprehensive reporting"
    echo ""
}

# Function to show view usage recommendations
show_view_usage_recommendations() {
    echo -e "${BOLD}${GREEN}üéØ View Usage Recommendations${NC}"
    echo "============================="
    echo ""
    
    echo -e "${CYAN}When to use each view:${NC}"
    echo ""
    
    echo -e "${YELLOW}üìç Roadmap View (Your existing View 5):${NC}"
    echo "   ‚Ä¢ Weekly planning and roadmap reviews"
    echo "   ‚Ä¢ Stakeholder presentations"
    echo "   ‚Ä¢ Long-term development tracking"
    echo "   ‚Ä¢ Priority assessment and adjustment"
    echo ""
    
    echo -e "${YELLOW}üìÖ Phase Timeline:${NC}"
    echo "   ‚Ä¢ Sprint planning within each phase"
    echo "   ‚Ä¢ Resource allocation planning"
    echo "   ‚Ä¢ Dependency identification"
    echo "   ‚Ä¢ Sequential development tracking"
    echo ""
    
    echo -e "${YELLOW}üèóÔ∏è Phase Board:${NC}"
    echo "   ‚Ä¢ Visual phase progress monitoring"
    echo "   ‚Ä¢ Team assignment across phases"
    echo "   ‚Ä¢ Quick phase status overview"
    echo "   ‚Ä¢ Capacity planning discussions"
    echo ""
    
    echo -e "${YELLOW}‚ö° Active Sprint:${NC}"
    echo "   ‚Ä¢ Daily standups"
    echo "   ‚Ä¢ Sprint execution monitoring"
    echo "   ‚Ä¢ Immediate work focus"
    echo "   ‚Ä¢ Blocker identification"
    echo ""
    
    echo -e "${YELLOW}üìä Progress Dashboard:${NC}"
    echo "   ‚Ä¢ Detailed progress reporting"
    echo "   ‚Ä¢ Stakeholder status updates"
    echo "   ‚Ä¢ Quality and metadata tracking"
    echo "   ‚Ä¢ Comprehensive project overview"
    echo ""
}

# Function to provide roadmap view optimization tips
provide_optimization_tips() {
    echo -e "${BOLD}${BLUE}üí° Roadmap View Optimization Tips${NC}"
    echo "================================="
    echo ""
    
    echo -e "${GREEN}For your existing Roadmap View:${NC}"
    echo ""
    
    echo -e "${CYAN}üéØ Sorting Best Practices:${NC}"
    echo "   1. Primary: Priority (High ‚Üí Medium ‚Üí Low)"
    echo "   2. Secondary: Module Category (Foundation ‚Üí Compute ‚Üí Data ‚Üí Security ‚Üí Advanced)"
    echo "   3. Tertiary: Status (Todo ‚Üí In Progress ‚Üí Review ‚Üí Blocked ‚Üí Done)"
    echo ""
    
    echo -e "${CYAN}üìã Column Recommendations:${NC}"
    echo "   ‚Ä¢ Title (300px) - Clear issue identification"
    echo "   ‚Ä¢ Status (120px) - Current development stage"
    echo "   ‚Ä¢ Priority (100px) - Development priority"
    echo "   ‚Ä¢ Module Category (150px) - Roadmap phase"
    echo "   ‚Ä¢ Complexity (100px) - Development effort estimate"
    echo "   ‚Ä¢ Assignees (120px) - Responsibility tracking"
    echo ""
    
    echo -e "${CYAN}üîç Filter Options:${NC}"
    echo "   ‚Ä¢ Active Work: Show Todo, In Progress, Review, Blocked (hide Done)"
    echo "   ‚Ä¢ Complete View: Show all statuses for full roadmap visibility"
    echo "   ‚Ä¢ Phase Focus: Filter by specific Module Category for phase work"
    echo ""
    
    echo -e "${CYAN}üé® Visual Enhancements:${NC}"
    echo "   ‚Ä¢ Use Priority colors to quickly identify high-priority items"
    echo "   ‚Ä¢ Module Category grouping shows phase progression"
    echo "   ‚Ä¢ Status progression shows development flow"
    echo ""
}

# Function to show completion summary
show_completion_summary() {
    echo -e "${BOLD}${GREEN}üéâ Roadmap View Optimization Complete!${NC}"
    echo "====================================="
    echo ""
    
    echo -e "${CYAN}What you now have:${NC}"
    echo "‚úÖ Analysis of your existing Roadmap View (View 5)"
    echo "‚úÖ Optimization recommendations for current view"
    echo "‚úÖ Complementary view suggestions"
    echo "‚úÖ Browser automation for additional views"
    echo "‚úÖ Manual setup instructions"
    echo "‚úÖ Usage recommendations for each view type"
    echo ""
    
    echo -e "${YELLOW}Recommended next steps:${NC}"
    echo "1. Optimize your existing Roadmap View (View 5) with suggested configurations"
    echo "2. Create 2-3 complementary views using browser console or manual setup"
    echo "3. Test the views with your current 17 issues"
    echo "4. Establish team usage patterns for each view"
    echo ""
    
    echo -e "${BLUE}Your complete view set will be:${NC}"
    echo "üó∫Ô∏è Roadmap View (View 5) - Strategic planning and roadmap overview"
    echo "üìÖ Phase Timeline - Sequential development tracking"
    echo "üèóÔ∏è Phase Board - Visual phase management"
    echo "‚ö° Active Sprint - Daily execution focus"
    echo "üìä Progress Dashboard - Comprehensive reporting"
    echo ""
}

# Main execution function
main() {
    analyze_existing_view
    suggest_complementary_views
    create_complementary_views_automation
    provide_manual_setup
    show_view_usage_recommendations
    provide_optimization_tips
    show_completion_summary
}

# Command line options
case "${1:-}" in
    --analyze)
        analyze_existing_view
        provide_optimization_tips
        ;;
    --complementary)
        suggest_complementary_views
        create_complementary_views_automation
        ;;
    --manual)
        provide_manual_setup
        ;;
    --usage)
        show_view_usage_recommendations
        ;;
    --help)
        echo "Usage: $0 [--analyze|--complementary|--manual|--usage|--help]"
        echo ""
        echo "Options:"
        echo "  --analyze        Analyze existing roadmap view and provide optimization tips"
        echo "  --complementary  Show complementary views and create automation"
        echo "  --manual         Show manual setup instructions"
        echo "  --usage          Show view usage recommendations"
        echo "  --help           Show this help"
        ;;
    *)
        main
        ;;
esac
