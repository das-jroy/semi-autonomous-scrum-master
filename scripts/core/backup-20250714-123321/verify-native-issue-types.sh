#!/bin/bash

# Load configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/config-helper.sh"

# Load project configuration
load_config


# Verify Native GitHub Issue Types Implementation
# Shows the current state and provides guidance for project management

set -e

# OWNER loaded from config
# REPO loaded from config

echo "üîç Native GitHub Issue Types Verification"
echo "=========================================="
echo "Repository: $OWNER/$REPO"
echo ""

echo "üìä Issue Type Distribution:"
echo "==========================="

# Count issues by type
task_count=0
feature_count=0 
bug_count=0
not_set_count=0

while read issue_num; do
    issue_info=$(gh api graphql -f query='
    query($owner: String!, $repo: String!, $number: Int!) {
      repository(owner: $owner, name: $repo) {
        issue(number: $number) {
          number
          title
          issueType {
            name
          }
          labels(first: 10) {
            nodes {
              name
            }
          }
        }
      }
    }' -f owner="$OWNER" -f repo="$REPO" -F number="$issue_num")
    
    issue_type=$(echo "$issue_info" | jq -r '.data.repository.issue.issueType.name // "Not Set"')
    issue_title=$(echo "$issue_info" | jq -r '.data.repository.issue.title')
    
    case "$issue_type" in
        "Task") 
            task_count=$((task_count + 1))
            echo "‚ö° #$issue_num [Task]: $issue_title"
            ;;
        "Feature") 
            feature_count=$((feature_count + 1))
            echo "üöÄ #$issue_num [Feature]: $issue_title"
            ;;
        "Bug") 
            bug_count=$((bug_count + 1))
            echo "üêõ #$issue_num [Bug]: $issue_title"
            ;;
        *) 
            not_set_count=$((not_set_count + 1))
            echo "‚ùì #$issue_num [Not Set]: $issue_title"
            ;;
    esac
done < <(gh issue list --repo "$OWNER/$REPO" --state open --limit 50 --json number | jq -r '.[].number')

echo ""
echo "üìà Summary:"
echo "----------"
echo "üöÄ Features: $feature_count issues (module implementations)"
echo "‚ö° Tasks: $task_count issues (configuration, documentation)"
echo "üêõ Bugs: $bug_count issues (fixes and errors)"
if [[ $not_set_count -gt 0 ]]; then
    echo "‚ùì Not Set: $not_set_count issues (need attention)"
fi

total_issues=$((task_count + feature_count + bug_count + not_set_count))
set_issues=$((task_count + feature_count + bug_count))
coverage_percent=$((set_issues * 100 / total_issues))

echo ""
echo "‚úÖ Coverage: $set_issues/$total_issues issues have native types set ($coverage_percent%)"

echo ""
echo "üéØ Benefits of Native Issue Types:"
echo "=================================="
echo "‚Ä¢ üîç Improved filtering in GitHub UI and project boards"
echo "‚Ä¢ üìã Better organization for different work types"
echo "‚Ä¢ üìä Enhanced reporting and metrics collection"
echo "‚Ä¢ üîÑ Integration with GitHub's native workflows"
echo "‚Ä¢ üé® Visual distinction in lists and boards"

echo ""
echo "üí° How to Use in GitHub UI:"
echo "=========================="
echo "‚Ä¢ Project Board: Filter by 'Type' field in views"
echo "‚Ä¢ Issue Lists: Use 'is:issue type:feature' search syntax"
echo "‚Ä¢ Automation: Set up rules based on issue types"
echo "‚Ä¢ Templates: Configure default types for new issues"

echo ""
echo "üöÄ Next Steps:"
echo "=============="
echo "‚Ä¢ Verify types are visible in GitHub project board"
echo "‚Ä¢ Configure project board views to filter by type"
echo "‚Ä¢ Set up issue templates with default types"
echo "‚Ä¢ Train team on using type-based filtering"

echo ""
echo "üîó GitHub UI Verification:"
echo "========================="
echo "Visit: https://github.com/$OWNER/$REPO/issues"
echo "‚Ä¢ Check that issues show type badges"
echo "‚Ä¢ Test filtering: 'is:issue type:feature'"
echo "‚Ä¢ Verify project board shows type field"

echo ""
echo "‚úÖ Native GitHub Issue Types Successfully Implemented!"
